/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => HotkeyPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian5 = require("obsidian");

// settingTab.ts
var import_obsidian4 = require("obsidian");

// hotkeyHandler.ts
var import_obsidian = require("obsidian");
var HotkeyHandler = class {
  constructor(app, hotkey, storageIndex) {
    this.app = app;
    this.hotkey = hotkey;
    this.storageIndex = storageIndex;
    if (this.hotkey.running) {
      this.start();
    }
  }
  start() {
    this.keydownHandler = (event) => {
      if (event.shiftKey === this.hotkey.shiftKey && event.ctrlKey === this.hotkey.ctrlKey && event.altKey === this.hotkey.altKey && event.key === this.hotkey.primaryKey) {
        event.preventDefault();
        this.keydownHandler2 = (event2) => {
          if (event2.key === this.hotkey.secondaryKey) {
            event2.preventDefault();
            this.executeCommand();
            document.removeEventListener(
              "keydown",
              this.keydownHandler2
            );
            if (this.timeoutId) {
              clearTimeout(this.timeoutId);
              this.timeoutId = void 0;
            }
          }
        };
        document.addEventListener("keydown", this.keydownHandler2);
        this.timeoutId = window.setTimeout(() => {
          document.removeEventListener(
            "keydown",
            this.keydownHandler2
          );
        }, 3e3);
      }
    };
    document.addEventListener("keydown", this.keydownHandler);
  }
  stop() {
    document.removeEventListener("keydown", this.keydownHandler);
    document.removeEventListener("keydown", this.keydownHandler2);
  }
  reset() {
    this.stop();
    this.start();
  }
  getHotkeyConfig() {
    return this.hotkey;
  }
  getStorageIndex() {
    return this.storageIndex;
  }
  setHotkeyConfig(hotkey) {
    this.hotkey = hotkey;
  }
  getRunning() {
    return this.hotkey.running;
  }
  toggleRunning() {
    if (this.hotkey.running) {
      this.stop();
    } else {
      this.start();
    }
    this.hotkey.running = !this.hotkey.running;
  }
  executeCommand() {
    const commandId = this.hotkey.commandId;
    const command = this.app.commands.commands[commandId];
    if (command) {
      this.app.commands.executeCommandById(commandId);
      new import_obsidian.Notice(`Befehl "${command.name}" ausgef\xFChrt.`);
    } else {
      new import_obsidian.Notice(`Befehl mit ID "${commandId}" nicht gefunden.`);
    }
  }
};

// newHotkeyModal.ts
var import_obsidian2 = require("obsidian");
var NewHotkeyModal = class extends import_obsidian2.Modal {
  constructor(app, onSubmit) {
    super(app);
    this.onSubmit = onSubmit;
    const newHotkey = {
      primaryKey: "",
      secondaryKey: "",
      ctrlKey: false,
      altKey: false,
      shiftKey: false,
      commandId: "",
      running: false
    };
    this.hotkey = newHotkey;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h2", { text: "New Hotkey" });
    new import_obsidian2.Setting(contentEl).setName("Primary Key").addText(
      (text) => text.setPlaceholder("Enter Primary Key").onChange((value) => {
        this.hotkey.primaryKey = value;
      })
    );
    new import_obsidian2.Setting(contentEl).setName("Secondary Key").addText(
      (text) => text.setPlaceholder("Enter Secondary Key").onChange((value) => {
        this.hotkey.secondaryKey = value;
      })
    );
    new import_obsidian2.Setting(contentEl).setName("Need Ctrl Key").addToggle(
      (toggle) => toggle.setTooltip("Test").onChange((value) => {
        this.hotkey.ctrlKey = value;
      })
    );
    new import_obsidian2.Setting(contentEl).setName("Need Alt Key").addToggle(
      (toggle) => toggle.setTooltip("Test").onChange((value) => {
        this.hotkey.altKey = value;
      })
    );
    new import_obsidian2.Setting(contentEl).setName("Need Shift Key").addToggle(
      (toggle) => toggle.setTooltip("Test").onChange((value) => {
        this.hotkey.shiftKey = value;
      })
    );
    new import_obsidian2.Setting(contentEl).setName("Command").addDropdown((dropdown) => {
      const commands = this.app.commands.listCommands();
      commands.forEach((command) => {
        dropdown.addOption(command.id, command.name);
      });
      dropdown.onChange((value) => {
        this.hotkey.commandId = value;
      });
    });
    new import_obsidian2.Setting(contentEl).addButton(
      (button) => button.setButtonText("Add").setCta().onClick(() => {
        this.onSubmit(this.hotkey);
        this.close();
      })
    );
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// hotkeySettingsModal.ts
var import_obsidian3 = require("obsidian");
var HotKeySettingsModal = class extends import_obsidian3.Modal {
  constructor(app, hotkey, onSubmit) {
    super(app);
    this.onSubmit = onSubmit;
    this.hotkey = hotkey.getHotkeyConfig();
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h2", { text: "Hotkey Settings" });
    new import_obsidian3.Setting(contentEl).setName("Primary Key").addText(
      (text) => text.setPlaceholder("Enter Primary Key").setValue(this.hotkey.primaryKey).onChange((value) => {
        this.hotkey.primaryKey = value;
      })
    );
    new import_obsidian3.Setting(contentEl).setName("Secondary Key").addText(
      (text) => text.setPlaceholder("Enter Secondary Key").setValue(this.hotkey.secondaryKey).onChange((value) => {
        this.hotkey.secondaryKey = value;
      })
    );
    new import_obsidian3.Setting(contentEl).setName("Need Ctrl Key").addToggle(
      (toggle) => toggle.setTooltip("Test").setValue(this.hotkey.ctrlKey).onChange((value) => {
        this.hotkey.ctrlKey = value;
      })
    );
    new import_obsidian3.Setting(contentEl).setName("Need Alt Key").addToggle(
      (toggle) => toggle.setTooltip("Test").setValue(this.hotkey.altKey).onChange((value) => {
        this.hotkey.altKey = value;
      })
    );
    new import_obsidian3.Setting(contentEl).setName("Need Shift Key").addToggle(
      (toggle) => toggle.setTooltip("Test").setValue(this.hotkey.shiftKey).onChange((value) => {
        this.hotkey.shiftKey = value;
      })
    );
    new import_obsidian3.Setting(contentEl).setName("Command").addDropdown((dropdown) => {
      const commands = this.app.commands.listCommands();
      commands.forEach((command) => {
        dropdown.addOption(command.id, command.name);
      });
      dropdown.setValue(this.hotkey.commandId);
      dropdown.onChange((value) => {
        this.hotkey.commandId = value;
      });
    });
    new import_obsidian3.Setting(contentEl).addButton(
      (button) => button.setButtonText("Save").setCta().onClick(() => {
        this.onSubmit(this.hotkey);
        this.close();
      })
    );
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// settingTab.ts
var HotkeySettingsTab = class extends import_obsidian4.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Hotkey Settings" });
    this.plugin.hotkeys.forEach(
      (hotkey, index) => {
        new import_obsidian4.Setting(this.containerEl).setName(`Hotkey ${index + 1}`).addButton(
          (button) => button.setButtonText(`${hotkey.getRunning() ? "\u2705" : "\u274C"}`).setTooltip("Execute").onClick(() => {
            hotkey.toggleRunning();
            this.updateHotkey(hotkey.getHotkeyConfig(), hotkey);
            this.display();
          })
        ).addButton(
          (button) => button.setButtonText("\u2699\uFE0F").setTooltip("Settings").onClick(() => {
            new HotKeySettingsModal(this.app, hotkey, (newhotkey) => {
              this.updateHotkey(newhotkey, hotkey);
            }).open();
          })
        ).addButton(
          (button) => button.setButtonText("\u{1F5D1}\uFE0F").setTooltip("Delete").onClick(() => {
            this.deleteHotkey(hotkey, index);
            this.display();
          })
        );
      }
    );
    new import_obsidian4.Setting(this.containerEl).addButton(
      (button) => button.setButtonText("New Hotkey").setTooltip("Hotkey").onClick(() => {
        new NewHotkeyModal(this.app, (hotkey) => {
          this.addNewHotkey(hotkey);
          this.display();
        }).open();
      })
    );
  }
  addNewHotkey(hotkey) {
    this.plugin.settings.hotkeys.push(hotkey);
    this.plugin.saveSettings();
    const n = this.plugin.settings.hotkeys.length;
    const hotKeyObject = new HotkeyHandler(this.app, this.plugin.settings.hotkeys[n - 1], n - 1);
    this.plugin.hotkeys.push(hotKeyObject);
  }
  deleteHotkey(hotkey, index) {
    this.plugin.settings.hotkeys.splice(hotkey.getStorageIndex(), 1);
    this.plugin.saveSettings();
    this.plugin.hotkeys.splice(index, 1);
  }
  updateHotkey(hotkeyConfig, hotkey) {
    hotkey.setHotkeyConfig(hotkeyConfig);
    this.plugin.settings.hotkeys[hotkey.getStorageIndex()] = hotkey.getHotkeyConfig();
    this.plugin.saveSettings();
  }
};

// main.ts
var HotkeyPlugin = class extends import_obsidian5.Plugin {
  constructor() {
    super(...arguments);
    this.hotkeys = [];
  }
  async onload() {
    await this.loadSettings();
    this.settings.hotkeys.forEach((hotkey, index) => {
      const hotkeyHandler = new HotkeyHandler(this.app, hotkey, index);
      this.hotkeys.push(hotkeyHandler);
    });
    this.addSettingTab(new HotkeySettingsTab(this.app, this));
  }
  async loadSettings() {
    const loadedSettings = await this.loadData();
    const hotkeyConfig = {
      primaryKey: "a",
      secondaryKey: "b",
      ctrlKey: true,
      altKey: false,
      shiftKey: false,
      commandId: "editor:toggle-bold",
      running: false
    };
    this.settings = loadedSettings || {
      hotkeys: [
        hotkeyConfig
      ]
    };
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
//# sourceMappingURL=data:application/json;base64,
